group array-table;

import "TableCommon.stg"

arrayTable(tableName, name, visitorClass, columns, pcolumns, gbColumns, gbAggrColumns,
        base, size,
        idxCols,
        methods, id, 
        multiSet=false, isNested=false) ::= <<
<if(!isNested)>
package socialite.tables;

<importForTable()>
<endif>

// ArrayTable
<if(!isNested)>public<endif> class <name> extends AbstractTableInst {
    private static final long serialVersionUID = 1;
    
    public static int tableid() { return <id>; }
    
    public static <name> create() { return new <name>(<base>, <size>); }
    public static <name> create(<first(columns).type> base, int size) { return new <name>(base, size); }
<if(IsInt.(first(columns).type))>
    public static <name> create(Integer base, Integer size) { return new <name>(base.intValue(), size.intValue()); }
<else>    
    public static <name> create(Long base, Integer size) { return new <name>(base.longValue(), size.intValue()); }
<endif>

    static volatile LockStatus lockStatus = LockStatus.writeLockEnabled;
    static ReadWriteLock rwlock = new ReentrantReadWriteLock();

    static void _enableInternalLock(boolean writeOnly) {
        if (writeOnly) {
            lockStatus = LockStatus.writeLockEnabled;
        } else {
            lockStatus = LockStatus.enabled;
        }
    }
    static void _disableInternalLock() {
        lockStatus = LockStatus.disabled;
    }
    static LockStatus _isLockEnabled() {
        return lockStatus;
    }

    public void enableInternalLock(boolean writeOnly) {
        _enableInternalLock(writeOnly);
    }
    public void disableInternalLock() {
        _disableInternalLock();
    }
    public LockStatus isLockEnabled() {
        return _isLockEnabled();
    }

    <first(columns).type> base;
    AtomicByteArray filled;

<if(pcolumns)>
    <rest(pcolumns):{c|<c.type> pcol<c.pos>[];<\n>}>
    void allocColumns(int size) {
        <rest(pcolumns):{c|pcol<c.pos> = new <c.type>[size];<\n>}>
    }
    <rest(columns):{c|
        private void setCol<i>(int i, <c.type> val) {
        <if(c.bitPacked)>
            val = val \<\< <c.bitShift>;
            pcol<c.pcolIdx>[i] = pcol<c.pcolIdx>[i] ^ ((pcol<c.pcolIdx>[i] ^ val) & <c.bitMask>);
        <else>
            pcol<c.pcolIdx>[i] = val;
        <endif>
        \}<\n>}>
    <rest(columns):{c|
        public <c.type> col<i>(int i) {
        <if(c.bitPacked)>
            <c.type> v = (pcol<c.pcolIdx>[i] & <c.bitMask>) >\>> <c.bitShift>;
            //int m = 32 - <c.numBits>;
            //return (v \<\< m) >\> m; // sign extending
            return v;
        <else>
            return pcol<c.pcolIdx>[i];
        <endif>
        \}<\n>}>
<else>
    <rest(columns):{c|<c.type> col<i>[];<\n>}>
    void allocColumns(int size) {
        <rest(columns):{c|
            <if(c.arrayType)> col<i> = new <c.compType>[size][];
            <else> col<i> = new <c.type>[size];
            <endif>}>
    }
    <rest(columns):{c|
        public <c.type> col<i>(int i) {
            return col<i>[i];
        \}}>
     <rest(columns):{c|
        private void setCol<i>(int i, <c.type> val) {
            col<i>[i] = val;
        \}<\n>}>
<endif>

    IndexMap indexMap = new IndexMap();
    IndexUtil indexUtil = new IndexUtil(this, rwlock);

    <idxCols:{ic|SIndex index<ic.absPos> = new SIndex();<\n>}>
     
    boolean isEmpty = true;
    
    public <name>() { }
    public <name>(<first(columns).type> _base, int size) {
        base = _base;
        filled = new AtomicByteArray(size);
        allocColumns(size);
        <idxCols:{ic|indexMap.put(<ic.absPos>, index<ic.absPos>);<\n>}>
    }


    /** synchronization fields and methods */
    final static byte emptyMarker = -100, writeMarker = -1;
    void _lock(int i, byte marker) {
        assert marker \< 0;
        int count = 0, maxTry = 10;
        boolean locked = false;
        while (true) {
            locked = filled.compareAndSet(i, (byte)0, (byte)(emptyMarker + marker));
            if (locked) { break; }
        <if(gbColumns)>
            locked = filled.compareAndSet(i, (byte)1, (byte)marker);
            if (locked) { break; }
        <else>
            if (filled.get(i) != 0) {
                throw new SociaLiteException("Entry starting with "+(i+base)+" already exists");
            }
        <endif>
            if (count++ > maxTry) {
                count = 0;
                Thread.yield();
            }
        }
    }

    void markFilled(int i) {
        if (lockStatus == LockStatus.disabled) {
            filled.set(i, (byte)1);
        } else {
            // wunlock() will mark the slot.
        }
    }
    void wlock(int i) {
        if (lockStatus == LockStatus.disabled) { return; }

        _lock(i, writeMarker);
    }
    void wunlock(int i) {
        if (lockStatus == LockStatus.disabled) { return; }

        filled.set(i, (byte)1);
    }

    public boolean isEntryEmpty(int i) {
        int flag = filled.get(i);
        return (flag == 0 || flag \< emptyMarker);
    }

    public <first(columns).type> base() { return base;}
    public int length() { return filled.length(); }
    public int size() { throw new UnsupportedOperationException(); }
    public boolean isEmpty() { return isEmpty; }
    public int id() { return <id>; }
    public String name() { return "<tableName>"; }
    
    public void init(List args) {
        assert args.size() == <length(rest(columns))>;
        <rest(columns):{c|<c.type> init<i> = (<c.type>)args.get(<i0>);<\n>}>
        filled.fill((byte)1);
        for (int i=0; i\<filled.length(); i++) {
            <rest(columns):{t| setCol<i>(i, init<i>);<\n>}>;
        }
        isEmpty = false;
    }

    public void clearQuick() { clear(); }
    public void clear() {
        filled.fill((byte)0);
        isEmpty = true;
    }
    
    public int totalAllocSize() {
        int totalAlloc = 8+filled.length();
        <columns:{c|totalAlloc += 12+<c.typeSize>*filled.length();<\n>}>
        return totalAlloc;
    }

   void rangeCheck(<first(columns).type> i) {
        if (i\<0 || i>=filled.length()) {
            throw new SociaLiteException("Value out of range for <tableName> <first(columns).absPos>'th column: "+(i+base));
        }
    }
    public boolean contains(<first(columns).type> a0<rest(columns):{c|, <c.type> a<i>}>) {
        int i=(int)(a0-base); rangeCheck(i);
        if (isEntryEmpty(i)) { return false; }
        
        if (true<rest(columns):{c|&&(col<i>(i)<EqOpMap.(c.type)>(a<i>))}>)
            return true;
        return false;
    }
    public boolean contains(<first(columns).type> a0<rest(columns):{c|, <c.type> a<i>}>, boolean[] dontcare) {
        if (dontcare[0]) {
            for (int i=0; i\<filled.length(); i++) {
                if (isEntryEmpty(i)) { continue; }
                if (true<rest(columns):{c|&&(dontcare[<i>] || col<i>(i)<EqOpMap.(c.type)>(a<i>))}>) {
                    return true;
                }
            }
            return false;
        }
        int i=(int)(a0-base); rangeCheck(i);
        if (isEntryEmpty(i)) { return false; }
        
        if (true<rest(columns):{c|&&(dontcare[<i>] || col<i>(i)<EqOpMap.(c.type)>(a<i>))}>)
            return true;
        return false;
    }

    public boolean insert(<first(columns).type> a0<rest(columns): {c|, <c.type> a<i>}>) {
        wlock((int)(a0-base));
        try {
            return insert_really(a0<rest(columns): {c|, a<i>}>);
        } finally {
            wunlock((int)(a0-base));
        }
    }
    boolean insert_really(<first(columns).type> a0<rest(columns): {c|, <c.type> a<i>}>) {
        int i=(int)(a0-base); rangeCheck(i);
        if (!isEntryEmpty(i)) {
            if (contains(a0<rest(columns): {c|, a<i>}>)) return false;

            String msg = "Cannot insert the tuple {"+a0<rest(columns):{c|+","+a<i>}> +"} to <tableName>\n";
             msg += "<tableName> already contains {"+a0<rest(columns):{c|+","+col<i>(i)}> +"} with the same 1st (array index) column\n";
             throw new SociaLiteException(msg);
        }
        if (isEmpty) { isEmpty = false; }

        <rest(columns):{c|setCol<i>(i, a<i>);<\n>}>
        <idxCols:{ic|index<ic.relPos>.add(a<ic.relPos>, i);<\n>}>
        markFilled(i);
        return true;
    }

    public void iterate(<visitorClass> v) {
        if (isEmpty) { return; }

        for (int i=0; i\<filled.length(); i++) {
            if (!isEntryEmpty(i)) {
                boolean $cont=v.visit(i+base<rest(columns):{c|, col<i>(i)}>);
                if (!$cont) { return; }
            }
        }
    }

    public void iterate_at(ColumnConstraints _, int offset, Object o) {
        if (isEmpty) { return; }
        <visitorClass> v = (<visitorClass>)o;

        if (!isEntryEmpty(offset)) {
            <first(columns).type> val = base+(<first(columns).type>)offset;
            boolean $cont=v.visit(val<rest(columns):{c|, col<i>(offset)}>);
            if (!$cont) { return; }
        }
    }

    public void iterate_by(ColumnConstraints constr, <visitorClass> v) {
        if (isEmpty) { return; }

        if (constr.hasRange(<first(columns).absPos>)) {
            iterate_range(constr.getRange(<first(columns).absPos>), constr, v);
        } else if (constr.hasColumn(<first(columns).absPos>)) {
            <first(columns).type> val = constr.getColumnValue(<first(columns).absPos>).getValue((<first(columns).type>)0);
            int offset = (int)(val - base);
            if (offset\<0||offset>=filled.length()) { return; }
            if (!isEntryEmpty(offset)) {
                boolean $cont=v.visit(val<rest(columns): {c|,col<i>(offset)}>);
                if (!$cont) { return; }
            }
        } else if (constr.getMaxColumn() \< <first(columns).absPos>) {
            iterate(v);
        } else {
            indexUtil.iterateBy(indexMap, constr, v, this);
        }
    }

    public void iterate_range(ColumnRange range, ColumnConstraints _, <visitorClass> v) {
        <first(columns).type> from = Math.max(range.getFrom((<first(columns).type>)0) - base, 0);
        <first(columns).type> to = Math.min(range.getTo((<first(columns).type>)0) - base, 0);
        rangeCheck(from);
        if (to > filled.length()) { to = filled.length(); }
        for (int i=from; i\<to; i++) {
            if (isEntryEmpty(i)) { continue; }
            boolean cont=v.visit(i+base<rest(columns):{c|, col<i>(i)}>);
            if (!cont) { return; }
        }
    }

<if(gbColumns)> //  if (gbColumns) [
    <groupbyArray()>
<endif> // ] if(gbColumns)


    <methods;separator="\n">
}
>>

groupbyArray() ::= <<
    public boolean groupby_update(<columns:{c|<c.type> a<i0>,}><gbAggrColumns:{c|AbstractAggregation f<i0>};separator=",">) {
        int i=(int)(a0-base); rangeCheck(i);

        boolean updatedAcc = false;
        wlock(i);
        try {
            if (isEntryEmpty(i)) {
                return insert_really(<columns:{c|a<i0>}; separator=", ">);
            } else if (true<rest(gbColumns):{c|&&(col<i>(i)<EqOpMap.(c.type)>(a<i>))}>) {
            <gbAggrColumns: {c|
                if (f<i0>!=null) {
                    <c.type> oldVal<i0> = col<c.relPos>(i);
                    <c.type> ans<i0> = f<i0>.apply(oldVal<i0>, a<c.relPos>);
                    boolean updated = !(ans<i0><EqOpMap.(c.type)>(oldVal<i0>));
                    if (updated) {
                        a<c.relPos> = ans<i0>;
                    \} else {
                        a<c.relPos> = oldVal<i0>;
                    \}
                    updatedAcc |= updated;
                \}
            }>
                if (updatedAcc) {
                    <rest(columns): {c|setCol<i>(i, a<i>);<\n>}>;
                    return true;
                } else {
                    return false;
                }
            } else {
                throw new AssertionError("Unexpected groupby operation");
            }
        } finally { wunlock(i); }
    }
>>
